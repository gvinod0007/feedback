# name: Build and Push to ECR

# on:
#   push:
#     branches:
#       - main  # Trigger this workflow on push to the 'main' branch

# jobs:
#   build-and-push:
#     runs-on: ubuntu-latest  # Use the latest Ubuntu virtual environment

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v2  # Step to checkout your code from the GitHub repository

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${ secrets.AWS_ACCESS_KEY_ID }
#         aws-secret-access-key: ${ secrets.AWS_SECRET_ACCESS_KEY }
#         aws-region: ap-southeast-1  # The AWS region where your ECR is hosted

#     - name: Login to Amazon ECR
#       id: login-ecr
#       uses: aws-actions/amazon-ecr-login@v1  # Login to your Amazon ECR

#     - name: Build and tag Docker image
#       run: |
#         docker build -t django-sample-app:latest .  # Build Docker image from the project
#         docker tag django-sample-app:latest 637423378523.dkr.ecr.ap-southeast-1.amazonaws.com/django/sample:latest  # Tag the image for ECR


#     - name: Push Docker image to Amazon ECR
#       run: |
#         docker push 637423378523.dkr.ecr.ap-southeast-1.amazonaws.com/django/sample:latest  # Push the image to ECR

name: Build, Push to ECR, and Deploy to Kubernetes

on:
  push:
    branches:
      - main  # Trigger this workflow on push to the 'main' branch

jobs:
  build-and-push:
    runs-on: ubuntu-latest  # Use the latest Ubuntu virtual environment

    steps:
    - name: Checkout code
      uses: actions/checkout@v2  # Checkout your code from the GitHub repository

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1  # Replace with your AWS region

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1  # Login to Amazon ECR

    - name: Build and tag Docker image
      run: |
        docker build -t django-sample-app:latest .  # Build Docker image
        docker tag django-sample-app:latest 637423378523.dkr.ecr.ap-southeast-1.amazonaws.com/django/sample:latest  # Tag the image for ECR

    - name: Push Docker image to Amazon ECR
      run: |
        docker push 637423378523.dkr.ecr.ap-southeast-1.amazonaws.com/django/sample:latest  # Push the image to ECR


  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build-and-push  # Ensure this job runs only after build-and-push succeeds

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v2  # Step to checkout the code

  #   - name: Set up Kubernetes CLI (kubectl)
  #     uses: azure/setup-kubectl@v3
  #     with:
  #       version: 'latest'  # Set up kubectl for interacting with Kubernetes

  #   - name: Set up kubeconfig
  #     run: |
  #       echo "${{ secrets.KUBECONFIG }}" | base64 -d > ~/.kube/config  # Set up the kubeconfig from GitHub secrets
  #       chmod 600 ~/.kube/config

  #   - name: Verify Kubernetes access
  #     run: |
  #       kubectl get nodes  # Ensure Kubernetes is accessible from GitHub Actions

  #   - name: Deploy to Kubernetes
  #     run: |
  #       echo "Updating Kubernetes deployment with new Docker image"
  #       kubectl set image deployment/django-sample-deployment django-sample-container=637423378523.dkr.ecr.ap-southeast-1.amazonaws.com/django/sample:latest --namespace dev
  #       kubectl rollout status deployment/django-sample-deployment --namespace dev  # Wait for the deployment to finish

        